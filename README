LongFromString converts a string to a long, without using 
the most direct built in Java functions.

Steve Baker Beepscore LLC 4 Dec 2010

//////////////
Specification:
1) Given a String, write a routine that converts the string to an long, 
without using the built in Java functions that would do this.
Describe what (if any) limitations the code has.  For example:

long StringToLong(String s)
{
        /* code goes here to convert a string to a long */
}

void Test()
{
   long i = StringToLong("123");
   if (i == 123)
       ... success ...
   else
       ... failure ...
}
///////////

Limitations:
Need to know or require a string encoding format.
Require UTF-8, maximum length 4 bytes = 32 bits.
Reference: http://en.wikipedia.org/wiki/Utf-8

May need to filter input to protect against accidental or purposeful bad input.
For example, filter out illegal characters, limit input length.

Input should be a whole number only.

Assume input is non-negative.  Probably long uses a sign digit that we can ignore.

Input should be base 10 digits 0-9. Don't support other bases such as binary or octal or hexadecimal. 

If number represented by string is longer than type long can hold, output will be invalid.
Java uses JVM, Android uses Dalvik VM.
Need to check if type long varies by platform.
For example, is long shorter on an Android phone than on Mac OSX?
"The long data type is a 64-bit signed two's complement integer.
It has a minimum value of -9,223,372,036,854,775,808 and 
a maximum value of 9,223,372,036,854,775,807 (inclusive)."
Ref: http://download.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html

Do other human languages use different characters for numbers (e.g. Chinese digits)?
Do we want to support non-Arabic numerals?
It appears that in China, Arabic numerals are now common.  Don't accept non-Arabic numerals.
Reference: http://en.wikipedia.org/wiki/Chinese_numerals

